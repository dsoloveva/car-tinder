{"version":3,"sources":["components/choice-container/choice-item/choice-item.jsx","actions/results.js","actions/status.js","constants/actions.js","requests/tinder.js","constants/keys.js","components/choice-container/choice-container.jsx","actions/tags.js","components/main-container/main-container.jsx","App.js","serviceWorker.js","reducers/tags.js","reducers/choiceItems.js","reducers/results.js","reducers/status.js","reducers/index.js","store/store.js","index.js"],"names":["ChoiceItem","_ref","img","react_default","a","createElement","className","src","concat","loadResult","dispatch","getState","state","type","tags","requestConfig","method","headers","Content-Type","credentials","body","JSON","stringify","fetch","then","response","dataPromise","json","status","Promise","reject","getRecommendations","selectedTags","result","data","RIGHT","LEFT","ChoiceContainerUi","currentItem","handleKey","e","_this","props","itemsList","length","keyCode","dislike","like","setState","focusContainer","component","focus","ref","this","tabIndex","onKeyDown","choice_item_ChoiceItem","React","Component","ChoiceContainer","connect","choiceItems","tag","startFetching","MainContainerUI","react","App","store","es","main_container","Boolean","window","location","hostname","match","initialState","reducers_tags","arguments","undefined","action","tagsInfo","forEach","tagValues","Object","objectSpread","defineProperty","toConsumableArray","results","reducers_status","makeRootReducers","asyncReducers","combineReducers","statusReducer","tagsReducer","choiceItemsReducer","resultsReducer","store_store","initState","middleware","thunk","composeEnhancers","compose","createStore","makeRootReducer","applyMiddleware","apply","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3403d2a.chunk.js","sourcesContent":["import React from 'react';\nimport './choice-item.css';\n\nexport const ChoiceItem = ({img}) => (\n  <img\n    className=\"choice-item\"\n    src={`images/sm/${img}`}/>\n);","import { SET_RESULT } from '../constants/actions';\nimport { setLoadingStatus, setFinishedStatus, startFetching } from './status';\nimport { getRecommendations } from '../requests/tinder';\n\nexport const setResultData = (data) => ({ type: SET_RESULT, data });\n\nexport const loadResult = () => (dispatch, getState) => {\n    const state = getState();\n    dispatch(startFetching());\n    return getRecommendations(state.selectedTags)\n      .then((result) => {\n        dispatch(setResultData(result));\n        dispatch(setFinishedStatus());\n      })\n  };\n","import { START_FETCHING, LOADING, FINISHED } from '../constants/actions';\n\nexport const startFetching = () => ({ type: START_FETCHING });\n\nexport const setLoadingStatus = () => ({ type: LOADING });\n\nexport const setFinishedStatus = () => ({ type: FINISHED });","export const LIKE = 'LIKE';\nexport const DISLIKE = 'DISLIKE';\n\nexport const START_FETCHING = 'START_FETCHING';\nexport const LOADING = 'LOADING';\nexport const FINISHED = 'FINISHED';\n\nexport const SET_RESULT = 'SET_RESULT';","import 'isomorphic-fetch';\n\nexport function getRecommendations(tags) {\n    const url = 'http://amishin.pythonanywhere.com/api/v1/model/predict';\n    const requestConfig = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      credentials: 'omit',\n      body: JSON.stringify(tags)\n    };\n    return fetch(url, requestConfig).then(response => {\n        const dataPromise = response.json();\n        if (response.status === 200) return dataPromise;\n        return Promise.reject('Server error');\n    });\n  }","export const RIGHT = 39;\nexport const LEFT = 37;","import React from 'react';\nimport { ChoiceItem } from './choice-item';\nimport { connect } from 'react-redux';\nimport { like, dislike } from '../../actions/tags';\nimport { startFetching } from '../../actions/status';\nimport { loadResult } from '../../actions/results';\nimport { LEFT, RIGHT } from '../../constants/keys';\n\nimport './choice-container.css';\n\nconst mapStateToProps = state => ({\n  itemsList: state.choiceItems,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  like: (tag) => dispatch(like(tag)),\n  dislike: (tag) => dispatch(dislike(tag)),\n  startFetching: () => dispatch(startFetching()),\n  loadResult: () => dispatch(loadResult())\n});\nclass ChoiceContainerUi extends React.Component {\n  state = {\n    currentItem: 0,    \n  };\n\n  handleKey = (e) => {\n    if (this.state.currentItem === this.props.itemsList.length - 1) {\n      this.props.loadResult();\n    }\n\n    if (e.keyCode === LEFT) {\n      this.props.dislike(this.props.itemsList[this.state.currentItem].tags);\n    } else if (e.keyCode === RIGHT) {\n      this.props.like(this.props.itemsList[this.state.currentItem].tags);\n    }\n    this.setState({ currentItem: this.state.currentItem + 1 });\n  };\n\n  focusContainer = (component) => {\n    if (component) {\n      component.focus();\n    }\n  };\n\n  render () {\n    return (<div\n        className=\"choice-container\"\n        ref={this.focusContainer}\n        tabIndex=\"0\"\n        onKeyDown={this.handleKey}\n      >\n      <h1>Like or Dislike?</h1>\n      <ChoiceItem\n        img={this.props.itemsList[this.state.currentItem].img}\n      >\n      </ChoiceItem>\n    </div>);\n  };\n};\n\nexport const ChoiceContainer = connect(mapStateToProps, mapDispatchToProps)(ChoiceContainerUi);","import { LIKE, DISLIKE } from '../constants/actions';\n\nexport const like = (tags) => ({ type: LIKE, tags });\n\nexport const dislike = (tags) => ({ type: DISLIKE, tags });","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { ChoiceContainer }  from '../choice-container';\n\nconst mapStateToProps = state => ({\n  status: state.status\n})\n\nclass MainContainerUI extends Component {\n  render () {\n    return (<Fragment>\n      {this.props.status === 'in_progress'\n        ? <ChoiceContainer></ChoiceContainer>\n        : 'Waiting result'\n      }\n    </Fragment>);\n  };\n};\n\nexport default connect(mapStateToProps)(MainContainerUI);","import React, { Component } from 'react';\nimport { Provider } from'react-redux';\n\nimport MainContainer from './components/main-container/main-container';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    const { store } = this.props;\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <MainContainer></MainContainer>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LIKE, DISLIKE } from '../constants/actions';\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case LIKE: {\n      let tagsInfo = {};\n      action.tags.forEach(tag => {\n        const tagValues = state[tag] || [];\n        tagsInfo = {\n          ...tagsInfo,\n          [tag]: [...tagValues, 1]\n        };\n      });\n      \n      return {\n        ...state,\n        ...tagsInfo\n      };\n    }\n    case DISLIKE: {\n      let tagsInfo = {};\n      action.tags.forEach(tag => {\n        const tagValues = state[tag] || [];\n        tagsInfo = {\n          ...tagsInfo,\n          [tag]: [...tagValues, 0]\n        };\n      });\n      \n      return {\n        ...state,\n        ...tagsInfo\n      };\n    }\n    default: \n      return state;\n  }\n}","const initialState = [\n  { img: 'birds.jpg', tags: ['birds'] },\n  { img: 'cats.jpg', tags: ['cats', 'birds'] },\n  { img: 'coffee.jpg', tags: ['coffee'] },\n  { img: 'cycling.jpg', tags: ['cycling', 'birds'] }\n];\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    default: \n      return state;\n  }\n}","import { SET_RESULT } from '../constants/actions';\n\nexport default (state = {}, action) => {\n  switch(action.type) {\n    case SET_RESULT:\n      return action.data;\n    default: \n      return state;\n  }\n}","import { START_FETCHING, LOADING, FINISHED } from '../constants/actions';\n\nexport default (state = 'in_progress', action) => {\n  switch(action.type) {\n    case START_FETCHING:\n      return 'fetching';\n    case LOADING:\n      return 'loading';\n    case FINISHED:\n      return 'finished';\n    default: \n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport tagsReducer from './tags';\nimport choiceItemsReducer from './choiceItems';\nimport resultsReducer from './results';\nimport statusReducer from './status';\n\nconst makeRootReducers = asyncReducers => combineReducers({\n  status: statusReducer,\n  selectedTags: tagsReducer,\n  choiceItems: choiceItemsReducer,\n  results: resultsReducer,\n  ...asyncReducers,\n});\n\nexport default makeRootReducers;","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport makeRootReducer from '../reducers/index';\n\nconst initialState = {\n  // choiceItems: [\n  //   { img: 'birds.jpg', tags: [''] },\n  //   { img: 'cats.jpg', tags: [''] },\n  //   { img: 'coffee.jpg', tags: [''] },\n  //   { img: 'cycling.jpg', tags: [''] }\n  // ],\n  // selectedTags: [],\n  // results: {},\n};\n\n\nexport default ((initState = initialState) => {\n  const middleware = [thunk];\n\n  // const enhancers = [];\n\n  let composeEnhancers = compose;\n\n  if (process.env.NODE_ENV !== 'production') {\n    const composeWithDevToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n    if (typeof composeWithDevToolsExtension === 'function') {\n      composeEnhancers = composeWithDevToolsExtension;\n    }\n  }\n\n  const store = createStore(\n    makeRootReducer(),\n    initState,\n    composeEnhancers(\n      applyMiddleware(...middleware),\n    )\n  );\n  store.asyncReducers = {};\n  return store;\n})();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(<App store={store}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}