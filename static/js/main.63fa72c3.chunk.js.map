{"version":3,"sources":["components/choice-container/choice-item/choice-item.jsx","constants/keys.js","components/choice-container/choice-container.jsx","actions/tags.js","constants/actions.js","App.js","serviceWorker.js","reducers/tags.js","reducers/index.js","store/store.js","index.js"],"names":["ChoiceItem","_ref","img","react_default","a","createElement","className","src","concat","process","RIGHT","ChoiceContainerUi","state","currentItem","handleKey","e","_this","props","itemsList","length","keyCode","pushTag","tags","setState","focusContainer","component","focus","ref","this","tabIndex","onKeyDown","choice_item_ChoiceItem","React","Component","ChoiceContainer","connect","choiceItems","dispatch","tag","type","App","store","es","Boolean","window","location","hostname","match","initialState","reducers_tags","arguments","undefined","action","Object","toConsumableArray","makeRootReducers","asyncReducers","combineReducers","objectSpread","selectedTags","tagsReducer","results","store_store","initState","middleware","thunk","composeEnhancers","compose","createStore","makeRootReducer","applyMiddleware","apply","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63fa72c3.chunk.js","sourcesContent":["import React from 'react';\nimport './choice-item.css';\n\nexport const ChoiceItem = ({img}) => (\n  <img\n    className=\"choice-item\"\n    src={`${process.env.PUBLIC_URL}/images/sm/${img}`}/>\n);","export const RIGHT = 39;","import React from 'react';\nimport { ChoiceItem } from './choice-item';\nimport { connect } from 'react-redux';\nimport { pushTag } from '../../actions/tags';\nimport { RIGHT } from '../../constants/keys';\n\nimport './choice-container.css';\n\nconst mapStateToProps = state => ({ itemsList: state.choiceItems })\n\nconst mapDispatchToProps = dispatch => ({\n  pushTag: (tag) => dispatch(pushTag(tag)),\n});\nclass ChoiceContainerUi extends React.Component {\n  state = {\n    currentItem: 0,    \n  };\n\n  handleKey = (e) => {\n    if (this.state.currentItem >= this.props.itemsList.length - 1) {\n      return;\n    }\n    if (e.keyCode === RIGHT) {\n      this.props.pushTag(this.props.itemsList[this.state.currentItem].tags);\n    }\n    this.setState({ currentItem: this.state.currentItem + 1 });\n  };\n\n  focusContainer = (component) => {\n    if (component) {\n      component.focus();\n    }\n  };\n\n  render () {\n    debugger;\n    return (<div\n        className=\"choice-container\"\n        ref={this.focusContainer}\n        tabIndex=\"0\"\n        onKeyDown={this.handleKey}\n      >\n      <h1>Like or Dislike?</h1>\n      <ChoiceItem\n        img={this.props.itemsList[this.state.currentItem].img}\n      >\n      </ChoiceItem>\n    </div>);\n  };\n};\n\nexport const ChoiceContainer = connect(mapStateToProps, mapDispatchToProps)(ChoiceContainerUi);","import { PUSH_TAG } from '../constants/actions';\n\nexport const pushTag = (tags) => ({ type: PUSH_TAG, tags });","export const PUSH_TAG = 'PUSH_TAG';","import React, { Component } from 'react';\nimport { Provider } from'react-redux';\n\nimport { ChoiceContainer }  from './components/choice-container';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    const { store } = this.props;\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <ChoiceContainer></ChoiceContainer>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { PUSH_TAG } from '../constants/actions';\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case PUSH_TAG: \n     return [ ...state, ...action.tags ];\n    default: \n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport tagsReducer from './tags';\n\nconst makeRootReducers = asyncReducers => combineReducers({\n  selectedTags: tagsReducer,\n  choiceItems: (state = [\n    { img: 'birds.jpg', tags: [''] },\n    { img: 'cats.jpg', tags: [''] },\n    { img: 'coffee.jpg', tags: [''] },\n    { img: 'cycling.jpg', tags: [''] }\n  ]) => state,\n  results: (state = {}) => state,\n  ...asyncReducers,\n});\n\nexport default makeRootReducers;","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport makeRootReducer from '../reducers/index';\n\nconst initialState = {\n  choiceItems: [\n    { img: 'birds.jpg', tags: [''] },\n    { img: 'cats.jpg', tags: [''] },\n    { img: 'coffee.jpg', tags: [''] },\n    { img: 'cycling.jpg', tags: [''] }\n  ],\n  selectedTags: [],\n  results: {},\n};\n\n\nexport default ((initState = initialState) => {\n  const middleware = [thunk];\n\n  // const enhancers = [];\n\n  let composeEnhancers = compose;\n\n  if (process.env.NODE_ENV !== 'production') {\n    const composeWithDevToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n    if (typeof composeWithDevToolsExtension === 'function') {\n      composeEnhancers = composeWithDevToolsExtension;\n    }\n  }\n\n  const store = createStore(\n    makeRootReducer(),\n    initState,\n    composeEnhancers(\n      applyMiddleware(...middleware),\n    )\n  );\n  store.asyncReducers = {};\n  return store;\n})();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(<App store={store}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}